{
  "Retro Game Engine Template": {
    "prefix": "retro-game-engine",
    "body": [
      "/* ¬© GG, MIT License */",
      "",
      "// Game Configuration",
      "const GAME_CONFIG = {",
      "  canvas: {",
      "    width: 800,",
      "    height: 600",
      "  },",
      "  fps: 60,",
      "  colors: {",
      "    primary: '#00ffff',",
      "    secondary: '#ff00ff',",
      "    accent: '#ffff00',",
      "    background: '#0a0a0f'",
      "  }",
      "};",
      "",
      "// Main Game Engine Class",
      "class ${1:GameName}Engine {",
      "  constructor() {",
      "    this.canvas = document.getElementById('gameCanvas');",
      "    this.ctx = this.canvas.getContext('2d');",
      "    this.gameState = 'menu';",
      "    this.lastFrameTime = 0;",
      "    ",
      "    this.setupCanvas();",
      "    this.initialize();",
      "  }",
      "",
      "  setupCanvas() {",
      "    this.canvas.width = GAME_CONFIG.canvas.width;",
      "    this.canvas.height = GAME_CONFIG.canvas.height;",
      "    this.ctx.imageSmoothingEnabled = false;",
      "  }",
      "",
      "  async initialize() {",
      "    this.gameLoop();",
      "    ",
      "    // Auto-run audit in development",
      "    if (typeof window !== 'undefined' && window.location?.hostname === 'localhost') {",
      "      console.log('üîç Running development audit...');",
      "      window.runAudit = this.runAuditTasks.bind(this);",
      "      setTimeout(() => this.runAuditTasks(), 1000);",
      "    }",
      "  }",
      "",
      "  gameLoop() {",
      "    const currentTime = performance.now();",
      "    const deltaTime = currentTime - this.lastFrameTime;",
      "    ",
      "    this.update(deltaTime);",
      "    this.render();",
      "    ",
      "    this.lastFrameTime = currentTime;",
      "    requestAnimationFrame(() => this.gameLoop());",
      "  }",
      "",
      "  update(deltaTime) {",
      "    // Game logic here",
      "  }",
      "",
      "  render() {",
      "    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);",
      "    // Rendering here",
      "  }",
      "",
      "  handleInput() {",
      "    // Input handling here",
      "  }",
      "",
      "  runAuditTasks() {",
      "    const results = [];",
      "    ",
      "    // License compliance",
      "    const hasLicense = document.head.innerHTML.includes('¬© GG, MIT License');",
      "    results.push({ name: 'MIT License Header', pass: hasLicense, critical: true });",
      "    ",
      "    // Game state validation",
      "    const validStates = ['menu', 'playing', 'paused', 'gameOver'];",
      "    results.push({ name: 'Valid Game State', pass: validStates.includes(this.gameState), critical: true });",
      "    ",
      "    // Frame rate validation",
      "    const frameRateOK = this.lastFrameTime && (performance.now() - this.lastFrameTime) < 20;",
      "    results.push({ name: 'Frame Rate 50fps+', pass: frameRateOK, critical: true });",
      "    ",
      "    console.log('üîç TDD Audit Results:');",
      "    console.table(results);",
      "    ",
      "    const criticalFails = results.filter(r => !r.pass && r.critical);",
      "    const allCriticalPassed = criticalFails.length === 0;",
      "    ",
      "    console.log(allCriticalPassed ? '‚úÖ All CRITICAL tests PASSED' : '‚ùå CRITICAL tests FAILED');",
      "    ",
      "    return { allPassed: results.every(r => r.pass), criticalPassed: allCriticalPassed, results };",
      "  }",
      "}",
      "",
      "// Initialize game when DOM is ready",
      "document.addEventListener('DOMContentLoaded', () => {",
      "  const game = new ${1:GameName}Engine();",
      "  window.game = game;",
      "});"
    ],
    "description": "Complete retro game engine template with TDD audit system"
  },

  "Game Entity Class": {
    "prefix": "game-entity",
    "body": [
      "class ${1:EntityName} {",
      "  constructor(x = 0, y = 0, width = 32, height = 32) {",
      "    this.x = x;",
      "    this.y = y;",
      "    this.width = width;",
      "    this.height = height;",
      "    this.vx = 0;",
      "    this.vy = 0;",
      "    this.active = true;",
      "  }",
      "",
      "  update(deltaTime) {",
      "    this.x += this.vx * deltaTime;",
      "    this.y += this.vy * deltaTime;",
      "  }",
      "",
      "  render(ctx) {",
      "    ctx.fillStyle = '${2:#00ffff}';",
      "    ctx.fillRect(this.x, this.y, this.width, this.height);",
      "  }",
      "",
      "  getBounds() {",
      "    return {",
      "      left: this.x,",
      "      right: this.x + this.width,",
      "      top: this.y,",
      "      bottom: this.y + this.height",
      "    };",
      "  }",
      "",
      "  intersects(other) {",
      "    const a = this.getBounds();",
      "    const b = other.getBounds();",
      "    return !(a.right < b.left || a.left > b.right || a.bottom < b.top || a.top > b.bottom);",
      "  }",
      "",
      "  reset() {",
      "    this.active = false;",
      "    this.vx = 0;",
      "    this.vy = 0;",
      "  }",
      "}"
    ],
    "description": "Game entity class with collision detection"
  },

  "Neon Text Renderer": {
    "prefix": "neon-text",
    "body": [
      "drawNeonText(text, x, y, options = {}) {",
      "  const {",
      "    fontSize = 24,",
      "    color = '#00ffff',",
      "    glowColor = '#00ffff',",
      "    glowSize = 10,",
      "    font = 'Courier New'",
      "  } = options;",
      "  ",
      "  this.ctx.save();",
      "  this.ctx.font = `${fontSize}px ${font}`;",
      "  this.ctx.textAlign = 'center';",
      "  ",
      "  // Outer glow",
      "  this.ctx.shadowColor = glowColor;",
      "  this.ctx.shadowBlur = glowSize;",
      "  this.ctx.fillStyle = color;",
      "  this.ctx.fillText(text, x, y);",
      "  ",
      "  // Inner glow",
      "  this.ctx.shadowBlur = glowSize / 2;",
      "  this.ctx.fillText(text, x, y);",
      "  ",
      "  // Core text",
      "  this.ctx.shadowBlur = 0;",
      "  this.ctx.fillStyle = '#ffffff';",
      "  this.ctx.fillText(text, x, y);",
      "  ",
      "  this.ctx.restore();",
      "}"
    ],
    "description": "Retro neon text rendering function"
  },

  "Input Manager Class": {
    "prefix": "input-manager",
    "body": [
      "class InputManager {",
      "  constructor() {",
      "    this.keys = {};",
      "    this.mouse = { x: 0, y: 0, clicked: false };",
      "    this.touches = new Map();",
      "    ",
      "    this.setupEventListeners();",
      "  }",
      "",
      "  setupEventListeners() {",
      "    // Keyboard events",
      "    document.addEventListener('keydown', (e) => {",
      "      this.keys[e.code] = true;",
      "      e.preventDefault();",
      "    });",
      "    ",
      "    document.addEventListener('keyup', (e) => {",
      "      this.keys[e.code] = false;",
      "      e.preventDefault();",
      "    });",
      "    ",
      "    // Touch events",
      "    document.addEventListener('touchstart', this.handleTouchStart.bind(this));",
      "    document.addEventListener('touchend', this.handleTouchEnd.bind(this));",
      "  }",
      "",
      "  isPressed(keyCode) {",
      "    return !!this.keys[keyCode];",
      "  }",
      "",
      "  handleTouchStart(e) {",
      "    e.preventDefault();",
      "    Array.from(e.changedTouches).forEach(touch => {",
      "      const pos = this.getTouchPosition(touch);",
      "      this.touches.set(touch.identifier, pos);",
      "      this.processTouchInput(pos);",
      "    });",
      "  }",
      "",
      "  handleTouchEnd(e) {",
      "    e.preventDefault();",
      "    Array.from(e.changedTouches).forEach(touch => {",
      "      this.touches.delete(touch.identifier);",
      "    });",
      "  }",
      "",
      "  getTouchPosition(touch) {",
      "    const canvas = document.getElementById('gameCanvas');",
      "    const rect = canvas.getBoundingClientRect();",
      "    return {",
      "      x: touch.clientX - rect.left,",
      "      y: touch.clientY - rect.top",
      "    };",
      "  }",
      "",
      "  processTouchInput(pos) {",
      "    // Convert touch to game input",
      "    const canvas = document.getElementById('gameCanvas');",
      "    const centerX = canvas.width / 2;",
      "    const centerY = canvas.height / 2;",
      "    ",
      "    if (Math.abs(pos.x - centerX) > Math.abs(pos.y - centerY)) {",
      "      // Horizontal swipe",
      "      this.keys[pos.x > centerX ? 'ArrowRight' : 'ArrowLeft'] = true;",
      "    } else {",
      "      // Vertical swipe",
      "      this.keys[pos.y > centerY ? 'ArrowDown' : 'ArrowUp'] = true;",
      "    }",
      "  }",
      "}"
    ],
    "description": "Complete input management system with touch support"
  },

  "Retro HTML Template": {
    "prefix": "retro-html",
    "body": [
      "<!DOCTYPE html>",
      "<html lang=\"es\">",
      "<head>",
      "  <!-- ¬© GG, MIT License -->",
      "  <meta charset=\"UTF-8\">",
      "  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
      "  <title>${1:Game Title} - AI4Devs Retro Games</title>",
      "  <meta name=\"description\" content=\"${2:Game description}\">",
      "  <meta name=\"keywords\" content=\"retro, arcade, game, HTML5, JavaScript\">",
      "  ",
      "  <!-- Open Graph Meta Tags -->",
      "  <meta property=\"og:title\" content=\"${1:Game Title} - AI4Devs Retro Games\">",
      "  <meta property=\"og:description\" content=\"${2:Game description}\">",
      "  <meta property=\"og:type\" content=\"website\">",
      "  ",
      "  <link rel=\"stylesheet\" href=\"style.css\">",
      "</head>",
      "<body>",
      "  <header class=\"game-header\">",
      "    <nav class=\"game-navigation\">",
      "      <a href=\"../index.html\" class=\"back-button neon-text\">‚Üê INICIO</a>",
      "    </nav>",
      "    <h1 class=\"game-title neon-title\">${1:Game Title}</h1>",
      "  </header>",
      "",
      "  <main class=\"game-container\">",
      "    <section class=\"game-area\">",
      "      <canvas id=\"gameCanvas\" class=\"game-canvas\" aria-label=\"${1:Game Title} gameplay area\"></canvas>",
      "      ",
      "      <div class=\"game-ui\">",
      "        <div class=\"score-display\">",
      "          <span>Puntuaci√≥n: <span id=\"scoreValue\">0</span></span>",
      "        </div>",
      "        ",
      "        <div class=\"game-controls\">",
      "          <button id=\"pauseBtn\" class=\"control-btn\">PAUSA</button>",
      "          <button id=\"restartBtn\" class=\"control-btn\">REINICIAR</button>",
      "        </div>",
      "      </div>",
      "    </section>",
      "",
      "    <details class=\"game-instructions\">",
      "      <summary class=\"instructions-title\">¬øC√≥mo jugar?</summary>",
      "      <div class=\"instructions-content\">",
      "        <h3>Controles:</h3>",
      "        <ul>",
      "          <li><strong>Flechas:</strong> ${3:Movement description}</li>",
      "          <li><strong>Espacio:</strong> ${4:Action description}</li>",
      "          <li><strong>P:</strong> Pausar/Reanudar</li>",
      "        </ul>",
      "        ",
      "        <h3>Objetivo:</h3>",
      "        <p>${5:Game objective description}</p>",
      "        ",
      "        <h3>Puntuaci√≥n:</h3>",
      "        <p>${6:Scoring system description}</p>",
      "      </div>",
      "    </details>",
      "  </main>",
      "",
      "  <script src=\"script.js\"></script>",
      "</body>",
      "</html>"
    ],
    "description": "Complete retro game HTML template"
  }
}
